generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model berth_products {
  id                Int         @id(map: "PK_a705733cb52e9e4a8515ee51c5d") @default(autoincrement())
  loadingCapacity   Float?
  unloadingCapacity Float?
  berthId           Int
  productId         Int
  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  updatedAt         DateTime    @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?   @db.Timestamp(6)
  berths            berths      @relation(fields: [berthId], references: [id], onDelete: SetNull, map: "BerthProductToBerth")
  products          products    @relation(fields: [productId], references: [id], onDelete: SetNull, map: "BerthProductToProduct")
  proformas         proformas[]
}

model berths {
  id                   Int              @id(map: "PK_036bf9e9b029e1df80fdabe1b99") @default(autoincrement())
  name                 String?          @db.VarChar
  description          String?          @db.VarChar
  portId               Int?
  createdAt            DateTime         @default(now()) @db.Timestamp(6)
  updatedAt            DateTime         @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?        @db.Timestamp(6)
  maxDraft             Float?
  airDraft             Float?
  maxLengthOverall     Float?
  maxDeadWeightTonnage Float?
  maxBeam              Float?
  waterDensity         Float?
  ports                ports?           @relation(fields: [portId], references: [id], map: "BerthToPort")
  berth_products       berth_products[]
  shipping_ports       shipping_ports[]
}

model checklist_items {
  id                   Int                    @id(map: "PK_bae00945a1d4789bd648e583e29") @default(autoincrement())
  title                String?                @db.VarChar
  shippingStatus       String?                @db.VarChar
  stage                String?                @db.VarChar
  shortDescription     String?                @db.VarChar
  longDescription      String?                @db.VarChar
  inputType            String?                @db.VarChar
  durationHours        Float?
  order                Int?
  checklistId          Int?
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  updatedAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  parentId             Int?
  checklists           checklists?            @relation(fields: [checklistId], references: [id], map: "ChecklistItemToChecklist")
  checklist_port_items checklist_port_items[]
}

model checklist_port_items {
  id                       Int                        @id(map: "PK_ae7e7f4b4c01e8fecb77bbdd8c0") @default(autoincrement())
  activated                Boolean?
  portId                   Int?
  checklistItemId          Int?
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @db.Timestamp(6)
  deletedAt                DateTime?                  @db.Timestamp(6)
  checklist_items          checklist_items?           @relation(fields: [checklistItemId], references: [id], map: "ChecklistPortItemToChecklistItem")
  ports                    ports?                     @relation(fields: [portId], references: [id], map: "ChecklistPortItemToPort")
  checklist_shipping_items checklist_shipping_items[]
}

model checklists {
  id              Int               @id(map: "PK_336ade2047f3d713e1afa20d2c6") @default(autoincrement())
  title           String?           @db.VarChar
  description     String?           @db.VarChar
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @db.Timestamp(6)
  deletedAt       DateTime?         @db.Timestamp(6)
  checklist_items checklist_items[]
}

model checklist_shipping_item_commentaries {
  id                       Int                       @id(map: "PK_7724b2f18e5c3254cf35c40b2eb") @default(autoincrement())
  commentary               String?                   @db.VarChar
  userId                   Int?
  checklistShippingItemId  Int?
  createdAt                DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                  @default(now()) @db.Timestamp(6)
  deletedAt                DateTime?                 @db.Timestamp(6)
  checklist_shipping_items checklist_shipping_items? @relation(fields: [checklistShippingItemId], references: [id], map: "ChecklistShippingItemCommentaryToChecklistShippingItem")
  users                    users?                    @relation(fields: [userId], references: [id], map: "ChecklistShippingItemCommentaryToUser")
}

model checklist_shipping_item_files {
  id                       Int                       @id(map: "PK_0d3062222c082d5735712008cbf") @default(autoincrement())
  title                    String?                   @db.VarChar
  filename                 String?                   @db.VarChar
  originalName             String?                   @db.VarChar
  checklistShippingItemId  Int?
  userId                   Int?
  createdAt                DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                  @default(now()) @db.Timestamp(6)
  deletedAt                DateTime?                 @db.Timestamp(6)
  checklist_shipping_items checklist_shipping_items? @relation(fields: [checklistShippingItemId], references: [id], map: "ChecklistShippingItemFileToChecklistShippingItem")
  users                    users?                    @relation(fields: [userId], references: [id], map: "ChecklistShippingItemFileToUser")
}

model checklist_shipping_items {
  id                                   Int                                    @id(map: "PK_4e041be9654bdfc0f4ff43a2a4b") @default(autoincrement())
  shippingStatus                       String?                                @db.VarChar
  value                                String?                                @db.VarChar
  title                                String?                                @db.VarChar
  stage                                String?                                @db.VarChar
  shortDescription                     String?                                @db.VarChar
  longDescription                      String?                                @db.VarChar
  inputType                            String?                                @db.VarChar
  durationHours                        Float?
  activated                            Boolean?
  status                               String?                                @db.VarChar
  order                                Int?
  shippingId                           Int?
  updatedByUserId                      Int?
  templateChecklistPortItemId          Int?
  createdAt                            DateTime                               @default(now()) @db.Timestamp(6)
  updatedAt                            DateTime                               @default(now()) @db.Timestamp(6)
  deletedAt                            DateTime?                              @db.Timestamp(6)
  parentId                             Int?
  shippings                            shippings?                             @relation(fields: [shippingId], references: [id], map: "ChecklistShippingItemToShipping")
  checklist_port_items                 checklist_port_items?                  @relation(fields: [templateChecklistPortItemId], references: [id], map: "ChecklistShippingItemToChecklistPortItem")
  users                                users?                                 @relation(fields: [updatedByUserId], references: [id], map: "ChecklistShippingItemToUser")
  checklist_shipping_item_commentaries checklist_shipping_item_commentaries[]
  checklist_shipping_item_files        checklist_shipping_item_files[]
}

model countries {
  id        Int       @id(map: "PK_b2d7006793e8697ab3ae2deff18") @default(autoincrement())
  name      String?   @db.VarChar
  flag      String?   @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  ports     ports[]
  vessels   vessels[]
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp Int
  name      String @db.VarChar
}

model port_files {
  id           Int       @id(map: "PK_c81b92f105ee635d4eea4e2172a") @default(autoincrement())
  title        String?   @db.VarChar
  filename     String?   @db.VarChar
  originalName String?   @db.VarChar
  portId       Int?
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  ports        ports?    @relation(fields: [portId], references: [id], map: "PortFileToPort")
}

model ports {
  id                   Int                    @id(map: "PK_291c9f372b1ce97c885e96f5ff4") @default(autoincrement())
  name                 String?                @db.VarChar
  countryId            Int?
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  updatedAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  slug                 String?                @db.VarChar
  countries            countries?             @relation(fields: [countryId], references: [id], map: "PortToCountry")
  berths               berths[]
  checklist_port_items checklist_port_items[]
  port_files           port_files[]
  shipping_ports       shipping_ports[]
}

model products {
  id                Int                 @id(map: "PK_0806c755e0aca124e67c0cf6d7d") @default(autoincrement())
  name              String?             @db.VarChar
  description       String?             @db.VarChar
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?           @db.Timestamp(6)
  berth_products    berth_products[]
  shipping_products shipping_products[]
}

model proforma_files {
  id           Int        @id(map: "PK_1df6365ab76e23513c23a83b638") @default(autoincrement())
  title        String?    @db.VarChar
  filename     String?    @db.VarChar
  originalName String?    @db.VarChar
  proformaId   Int?
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  proformas    proformas? @relation(fields: [proformaId], references: [id], map: "ProformaFileToProforma")
}

model proformas {
  id                     Int              @id(map: "PK_b79c62b9ae44960defadcacdcba") @default(autoincrement())
  taxes                  String?          @db.VarChar
  totalValue             Int?
  berthedHours           Int?
  berthProductId         Int
  createdAt              DateTime         @default(now()) @db.Timestamp(6)
  updatedAt              DateTime         @default(now()) @db.Timestamp(6)
  deletedAt              DateTime?        @db.Timestamp(6)
  idHash                 String?          @db.VarChar
  applicantName          String?          @db.VarChar
  applicantEmail         String?          @db.VarChar
  vesselName             String?          @db.VarChar
  imo                    String?          @db.VarChar
  deadWeightTonnage      Float?
  lengthOverall          Float?
  grossTonnage           Float?
  package                String?          @db.VarChar
  builtYear              Int?
  agencyType             String?          @db.VarChar
  operationType          String?          @db.VarChar
  productTonnage         Float?
  usd                    Float?
  isCargillInternational Boolean?
  beam                   Float?
  etb                    DateTime?        @db.Timestamp(6)
  draft                  Float?
  requestingCustomer     String?          @db.VarChar
  vesselType             String?          @db.VarChar
  berth_products         berth_products   @relation(fields: [berthProductId], references: [id], onDelete: SetNull, map: "ProformaToBerthProduct")
  proforma_files         proforma_files[]
}

model shipping_documents {
  id                            Int                  @id(map: "PK_7bb7e5b810a85ce7f03d748ac41") @default(autoincrement())
  type                          String?              @db.VarChar
  documentNumber                String?              @db.VarChar
  consignee                     String?              @db.VarChar
  vesselName                    String?              @db.VarChar
  portOfLoading                 String?              @db.VarChar
  portOfDischarge               String?              @db.VarChar
  notify                        String?              @db.VarChar
  productName                   String?              @db.VarChar
  productNameExtraInfo          String?              @db.VarChar
  productWeightExtraInfo        String?              @db.VarChar
  freightType                   String?              @db.VarChar
  charterPartyDate              String?              @db.VarChar
  shipBoardedDate               String?              @db.VarChar
  issuePlaceDate                String?              @db.VarChar
  numberOfOriginalBillOfLanding Float?
  shipper                       String?              @db.VarChar
  masterName                    String?              @db.VarChar
  signature                     String?              @db.VarChar
  shippingId                    Int?
  userId                        Int?
  createdAt                     DateTime             @default(now()) @db.Timestamp(6)
  updatedAt                     DateTime             @default(now()) @db.Timestamp(6)
  deletedAt                     DateTime?            @db.Timestamp(6)
  order                         Int?
  subsetId                      Int?
  productGrossWeight            Float?
  shippings                     shippings?           @relation(fields: [shippingId], references: [id], map: "ShippingDocumentToShipping")
  shipping_documents            shipping_documents?  @relation("shipping_documentsToshipping_documents_subsetId", fields: [subsetId], references: [id], map: "SubsetToShippingDocument")
  users                         users?               @relation(fields: [userId], references: [id], map: "ShippingDocumentToUser")
  other_shipping_documents      shipping_documents[] @relation("shipping_documentsToshipping_documents_subsetId")
}

model shipping_files {
  id           Int        @id(map: "PK_a7c2a9f3a566abe20315aee35b0") @default(autoincrement())
  title        String?    @db.VarChar
  filename     String?    @db.VarChar
  originalName String?    @db.VarChar
  shippingId   Int?
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @default(now()) @db.Timestamp(6)
  deletedAt    DateTime?  @db.Timestamp(6)
  userId       Int?
  shippings    shippings? @relation(fields: [shippingId], references: [id], map: "ShippingFileToShipping")
  users        users?     @relation(fields: [userId], references: [id], map: "ShippingFileToUser")
}

model shipping_ports {
  id                      Int        @id(map: "PK_bd4755ceda68fe38ab8247078a6") @default(autoincrement())
  estimatedTimeOfArrival  DateTime?  @db.Timestamp(6)
  estimatedTimeOfBerthing DateTime?  @db.Timestamp(6)
  estimatedTimeOfSailing  DateTime?  @db.Timestamp(6)
  timeOfArrival           DateTime?  @db.Timestamp(6)
  timeOfBerthing          DateTime?  @db.Timestamp(6)
  timeOfSailing           DateTime?  @db.Timestamp(6)
  shippingId              Int?
  portId                  Int?
  berthId                 Int?
  createdAt               DateTime   @default(now()) @db.Timestamp(6)
  updatedAt               DateTime   @default(now()) @db.Timestamp(6)
  deletedAt               DateTime?  @db.Timestamp(6)
  berths                  berths?    @relation(fields: [berthId], references: [id], map: "ShippingPortToBerth")
  ports                   ports?     @relation(fields: [portId], references: [id], map: "ShippingPortToPort")
  shippings               shippings? @relation(fields: [shippingId], references: [id], map: "ShippingPortToShipping")
}

model shipping_products {
  id         Int        @id(map: "PK_7479fa04dcbdfcbff3cfc522734") @default(autoincrement())
  weight     Float?
  shippingId Int?
  productId  Int?
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @default(now()) @db.Timestamp(6)
  deletedAt  DateTime?  @db.Timestamp(6)
  products   products?  @relation(fields: [productId], references: [id], map: "ShippingProductToProduct")
  shippings  shippings? @relation(fields: [shippingId], references: [id], map: "ShippingProductToShipping")
}

model shippings {
  id                       Int                        @id(map: "PK_665fb613135782a598a2b47e5b2") @default(autoincrement())
  status                   String?                    @db.VarChar
  ownerHeadName            String?                    @db.VarChar
  ownerHeadAddress         String?                    @db.VarChar
  disponentOwner           String?                    @db.VarChar
  charterName              String?                    @db.VarChar
  masterName               String?                    @db.VarChar
  masterEmail              String?                    @db.VarChar
  estimatedDraftArrival    String?                    @db.VarChar
  estimatedDraftDeparture  String?                    @db.VarChar
  vesselOperator           String?                    @db.VarChar
  vesselOperatorEmail      String?                    @db.VarChar
  operationType            String?                    @db.VarChar
  isAppointmentConfirmed   Boolean?
  agencyType               String?                    @db.VarChar
  voyageNumber             String?                    @db.VarChar
  externalCode             String?                    @db.VarChar
  comments                 String?                    @db.VarChar
  lastPort                 String?                    @db.VarChar
  nextPort                 String?                    @db.VarChar
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @db.Timestamp(6)
  deletedAt                DateTime?                  @db.Timestamp(6)
  vesselId                 Int?
  userId                   Int?
  vesselOldValues          String?                    @db.VarChar
  totalLoadExpected        Int?
  totalLoadActual          Int?
  users                    users?                     @relation(fields: [userId], references: [id], map: "ShippingToUser")
  vessels                  vessels?                   @relation(fields: [vesselId], references: [id], map: "ShippingToVessel")
  checklist_shipping_items checklist_shipping_items[]
  shipping_documents       shipping_documents[]
  shipping_files           shipping_files[]
  shipping_ports           shipping_ports[]
  shipping_products        shipping_products[]
  subsets                  subsets[]
  inquires                 inquires[]
}

model subsets {
  id         Int        @id(map: "PK_d20318e6d3ba92913be722f7187") @default(autoincrement())
  name       String?    @db.VarChar
  shippingId Int?
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @default(now()) @db.Timestamp(6)
  deletedAt  DateTime?  @db.Timestamp(6)
  shippings  shippings? @relation(fields: [shippingId], references: [id], map: "SubsetsToShippings")
}

model user_files {
  id           Int       @id(map: "PK_a62f81d2afadf20a024e11b43bd") @default(autoincrement())
  title        String?   @db.VarChar
  filename     String?   @db.VarChar
  originalName String?   @db.VarChar
  userId       Int?
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  users        users?    @relation(fields: [userId], references: [id], map: "UserFileToUser")
}

model users {
  id                                   Int                                    @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(autoincrement())
  name                                 String?                                @db.VarChar
  email                                String?                                @db.VarChar
  password                             String?                                @db.VarChar
  createdAt                            DateTime                               @default(now()) @db.Timestamp(6)
  updatedAt                            DateTime                               @default(now()) @db.Timestamp(6)
  deletedAt                            DateTime?                              @db.Timestamp(6)
  checklist_shipping_item_commentaries checklist_shipping_item_commentaries[]
  checklist_shipping_item_files        checklist_shipping_item_files[]
  checklist_shipping_items             checklist_shipping_items[]
  shipping_documents                   shipping_documents[]
  shipping_files                       shipping_files[]
  shippings                            shippings[]
  user_files                           user_files[]
  inquires                             inquires[]
  inquires_comments                    inquires_comments[]
}

model vessel_files {
  id           Int       @id(map: "PK_64cea928d7c81abbae7042b71cd") @default(autoincrement())
  title        String?   @db.VarChar
  filename     String?   @db.VarChar
  originalName String?   @db.VarChar
  vesselId     Int?
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  vessels      vessels?  @relation(fields: [vesselId], references: [id], map: "VesselFileToVessel")
}

model vessels {
  id                            Int            @id(map: "PK_be5a5b1f0d546d8bec08e0d1583") @default(autoincrement())
  name                          String?        @db.VarChar
  imo                           String?        @unique @db.VarChar
  call_sign                     String?        @db.VarChar
  satellite_telephone           String?        @db.VarChar
  classification_society        String?        @db.VarChar
  type                          String?        @db.VarChar
  length_overall                Float?
  dead_weight_tonnage           Float?
  beam                          Float?
  cubic_meters                  Float?
  gross_tonnage                 Float?
  net_tonnage                   Float?
  panama_gross_tonnage          Float?
  panama_net_tonnage            Float?
  suez_gross_tonnage            Float?
  suez_net_tonnage              Float?
  reduced_gross_tonnage         Float?
  length_between_perpendiculars Float?
  molded_depth                  Float?
  number_of_holds               Float?
  number_of_tanks               Float?
  created_at                    DateTime       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime       @default(now()) @db.Timestamp(6)
  deleted_at                    DateTime?      @db.Timestamp(6)
  country_id                    Int?
  draft_sw                      String?        @db.VarChar
  built_year                    Int?
  countries                     countries?     @relation(fields: [country_id], references: [id], map: "VesselToCountry")
  shippings                     shippings[]
  vessel_files                  vessel_files[]
}

model inquires {
  id                 Int                 @id @default(autoincrement())
  title              String?             @db.VarChar
  type               String?             @db.VarChar
  shipping_id        Int?
  updated_by_user_id Int?
  shippings          shippings?          @relation(fields: [shipping_id], references: [id], map: "InquiresToShipping")
  users              users?              @relation(fields: [updated_by_user_id], references: [id], map: "InquiresToUsers")
  inquires_comments  inquires_comments[]
}

model inquires_comments {
  id         Int       @id @default(autoincrement())
  body       String?   @db.VarChar
  is_done    Boolean
  inquire_id Int?
  user_id    Int?
  inquires   inquires? @relation(fields: [inquire_id], references: [id], map: "CommentsToInquires")
  users      users?    @relation(fields: [user_id], references: [id], map: "CommentsToUsers")
}
